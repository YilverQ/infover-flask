API_Rest
[
	1----------------------------
	Arquitectura Java - Cecilio Álvares Cuales - ¿Qué Es Rest? - www.arquitecturajava.com

	2----------------------------
	Red Hat - ¿Qué Es una API De Rest? - www.redhat.com


	3----------------------------
	juanda.gitbooks.io - www.juanda.gitbooks.io
	

	4----------------------------
	The Dojo Blog - Hector Patricio - Entendiendo Rest, El estilo de Arquitectura - www.blog.thedojo.mx


	5----------------------------
	Imaginary Cloud - Pedro Martinho - Flask Python: Creación De API Rest y Documentación Swagger  - www.imaginarycloud.com
]


((((((((((	((((((((((((((((())	)))))))))))))))	))))))))))
&&&&&&&&&&	&&&&&&&&&&&&&&&&&&&	&&&&&&&&&&&&&&&	&&&&&&&&&&
((((((((((	((((((((((((((((())	)))))))))))))))	))))))))))


API Rest:

	1...............
		AnexSoft - Eduardo Rodríguez Patiño - ¿Qué es Rest? - www.anexsoft.com

	2..............
		Idento - Jonathan Ordóñez - ¿Qué es una Api Rest? - www.idento.es

	3..............
		RockContent - Ivan De Souza - Api Rest: Conoce la importancia de este recurso para el desempeño de una página web - www.rockcontent.com

	4..............
		BBVA Api_Rest - Api Rest: Cuáles son sus ventajas en el desarrollo de proyectos - www.bbvaapimarket.com


///////////////////////////////////////////////////
///////////////////////////////////////////////////

Introducción:
	
	Realizar una aplicación no es una tarea fácil, solo ponte a pensar como harías para crear una aplicación que tenga bases de datos, back-end y front-end. Para ello necesitamos un equipo. Sería muy conveniente realizar miniaplicaciones y luego integrarlas en una sola aplicación máster, de hecho, esto se hace muy a menudo. API es un conjunto de restricciones que permite la perfecta comunicación entre aplicaciones y si se implementa con Rest que no es más que una forma de utilizar una API, podremos sacarle el máximo provecho a esta arquitectura para realizar nuestras aplicaciones.

API:
	
	API es un acrónimo de Application Programming Interface, y se utiliza para comunicar datos entre distintas aplicaciones. Los archivos de datos que trabajan las APIs pueden ser de cualquier tipo, HTML, .TXT, .CSV, pero sin duda alguna la más utilizada son JSON y XML y esto se debe a que son más rápidas y entendibles para el humano. Teniendo los archivos a trabajar la API trabajará sobre peticiones HTTP responsables de las operaciones básicas para la manipulación de datos.


Rest:

	Representational State Transfer o simplemente Rest, en un conjunto de restricciones con las que podemos crear aplicaciones webs utilitando HTTP para obtener datos y generar operaciones sobre archivos como XML y JSON (estos por ser rápidos y fácilmente entendibles). Ten en cuenta que Rest no es una arquitectura de software sino una técnica o estilo de arquitectura la cual se aplica conjuntamente con APIs.


Restricciones De Un Sistema Rest:

	1. Cliente-Servidor: 

		Esta restricción mantiene al cliente y al servidor por separados, la aplicación Front-end no necesita conocer como trabaja el Back-end ni viceversa, así cada componente de nuestra aplicación se despreocupa como funciona la otra parte.

	2. Sin Estado:

		Cada petición que recibe el servidor debería ser independiente, es decir, no es necesario mantener secciones para ejecutar una determinada acción. Lo que permite que ni el cliente ni el servidor necesiten recordar un estado previo para poder satisfacerla.

	3. Cacheable: 

		Debe admitir un sistema de almacenamiento en caché para evitar llamadas recurrentes al servidor y así evitar recuperar el mismo recurso.

	4. Interfaz Uniforme: 

		Esta restricción agrupa cuatros conceptos para la transferencia de datos (POST, GET, PUT, DELETE) para un sistema Rest, y utiliza enlaces para navegar por la aplicación y acceder a un recurso en concreto con una URI en concreta.

	5. Sistemas De Capas: 

		El servidor puede disponer de varias capas para su implementación. Esto ayuda a que cada capa lleve una funcionalidad dentro del sistema ayudando a mejorar la escalabilidad, el rendimiento y la seguridad.


Verbos HTTP:

	Cada petición realizada a nuestra API responde a un verbo, y dicho verbo a una operación en común. Mediante los métodos HTTP hacemos las peticiones, lo común es GET, POST, PUT y DELETE.

	GET: 
		Se usa para solicitar o consultar los recursos, y tiene como respuesta 200 que es equivalente a que todo ha funcionado correctamente o 404 que es el famoso recurso no encontrado y es la respuesta que da el servidor cuando un recurso no está.

	POST: 
		Se usa para insertar nuevos recursos, y tiene como respuesta 403 (accedo prohibido), 400 (petición incorrecta), 500 (error en el servidor), 201 recurso creado.

	PUT: 
		Se usa para actualizar recursos, los mensajes que te puede dar son los mismo que el POST. 403 (accedo prohibido), 400 (petición incorrecta), 500 (error en el servidor), 201 recurso creado. 

	DELETE: 
		Se usa para borrar recursos, algunos resultados posibles son 200 (recurso eliminado), 404 (Not found) y 500 (error en el servidor). 

Puntos a favor de las APIs Rest
	
	Debido a que Rest separa completamente la interfaz de usuario del servidor y el almacenamiento de datos, Rest ofrece la ventaja de escalar el producto sin excesivos problemas. Además de poder migrar a otros servidores o probar nuevos entornos dentro del desarrollo ya que las APIs Rest se adaptan a la tecnología con la que se esté trabajando. 

¿Cuándo Utilizar API Rest?
	
	Últimamente la tendencia es desarrollar aplicaciones orientadas a servicios, y sin duda alguna, es conveniente trabajar con API Rest cuando requerimos que nuestro sistema no solamente sea accedido desde la Web sino que también se puede acceder desde una aplicación de escritorio o móvil, También se podría dar el caso donde requerimos desacoplar la aplicación en capas para ir iterando funcionalidades y así escalar la aplicación. 

Conclusión

	API son perfectas para realizar varias aplicaciones y poderlas comunicar mediante un archivo universal como XML o JSON, por otro lado Rest no es una arquitectura de software sino que es un estilo de arquitectura que se suele utilizar conjuntamente con las APIs. Para que una API sea considerada API Rest deberá seguir unas restricciones para que aseguren que sean Rest como por ejemplo que sea Cliente-Servidor, Sin estado, Cacheable entre otros. Estas prácticas le otorgará a tu aplicación facilidad para probar nuevos entornos y poder migras a otros servidores sin importar la tecnología o lenguaje de programación en el cual estés trabajando.  