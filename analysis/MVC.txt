MVC
[
	1----------------------------
	Campus MPV - José Aguilar - ¿Qué es el patrón MVC en programación y por qué es útil? - www.campusmvp.es

	2----------------------------
	SRC - Javier Gómez - ¿Qué es y cómo funciona el desarrollo web MVC? - www.srcodigofuente.es


	3----------------------------
	Medium - Valeria García Cobian - Patrón de diseño MVC - www.blog.nearsoftjobs.com
	

	4----------------------------
	Blog Nube Colectiva
	¿Qué es MVC y otros detalles?
	www.blog.nubecolectiva.com
]

---------------------------
---------------------------
---------------------------

Definitions MVC:

	Campus MPV:

		MVC era inicialmente un patron arquitectural, un modelo o guía que expresa cómo organizar y estructurar los componentes de un sistema de sodtware, sus responsabilidades y las relaciones existentes entre cada uno de ellos.

		Su nombre, MVC, parte de las inicales de MOdelo-Vista-Controlador (Model-View-Controller), que son las capas o grupos de componentes en los queorganizaremos nuestras aplicaciones bajo este paradigma.

		Teniendo en cuenta su antiguedad, es obvio que nisiquiera fue ideado expresamente para sistemas web aunque ahora se use mucho en ellas. Existen implementaciones para todo tipo de sistemas.

		La arquitectura MVC propone, independientemente de las tecnologías o entornos en los que se basa el sistema a desarrollar, la separación de los componentes de una aplicación en tres grupos principales: El modelo, la vista y el controlador, y describe como se relacionarán entre ellos para mantener una estructura organizada, limpia y con un acoplamiento mínimo entre las distintas capas. 

		Ventajas:

			El uso del patrón MVC ofrece multiples ventajas sobre otras maneras de desarrollar aplicaciones con interfaz de usuario, y en especial para la web. 

			La clara separación de responsabilidades impuesta por el uso del patrón MVC hace que los componentes de nuestras aplicaciones tengan sus misiones bien definidas. Por lo tanto, nuestros sistemas serán más limpios, simples, màs facilmente de mantener y más robustos.

			Mayor velocidad de desarrollo en equipo, que es consecuencia de lo anterior, ya que al estar separado en tres partes tan diferenciadas, diferentes programadores pueden ocuparse de cada parte en paralelo. 

			Hay que adaptarse fuetemente a las convenciones y al patron. 

			De todos modos, el uso del patrón MVC y sus variantes está claro que ha triunfado en todo tipode desarrolos, (web, movil escritorio...), y en todo tipo de plataformas. EN la actualidad no te puedes permitir el lujo de no conocerlo.

	SRC:

		MVC son las siglas de Modelo-Vista-Controlador, un patron de arquitectua de software, que separa el desarrollo de aplicaciones web en tres partes: interfaz, el accedo a la información y el tratamiento de los eventos.

		Pues digamosque es un estándar de desarrollo para que todos los que desarrollamos web nos entendamos, siguiendo una lógica común. Siguiendo este partón tendremos unas directrices para saber con rapidez donde va cada parte de nuetro codigo. 

		Ventajas:

			Seguir el desarrollo mediante el patron MVC nos aporta grandes ventajas, entre ellas evitar reinventar la rueda en cada proyecto nuevo, y tener unas pautas claras de como y donde debemos programar cada parte del funcionamiento de nuestra web.

			MVC es una forma de desarrollar clara, con unas consignas sencillas de entender y en las que un iniciado se puede integrar muy rapido.

			Simplifica la planificación de soluciones y se adapta a las diferentes posibilidades de nuestros desarrollos. 

			Permite un mejor mantenimineto de los desarrollos. Pudiendo pasar de un programador a otro, que conozca este patron sin problemas de adaptación

			Mejora el tratamiento de la seguridad y la solución de errores al tener claras las entradas y salidas de datos. 

	Medium:

		Tener buenas practicas al programar es importante porque permite llevar el codigo de una manera forma, así tambien nos permite tener una estructura del proyecto entendible. Es por eso que esisten diferentes patrones de diseño, que nos permiten clasificar y separar mediante modulos para poder mantener en equilibrio los componentes que conforman el proyecto. 

		MVC es un patrón de diseño que se estructura mediante tres componentes: Modelo, Vista y Controlador. Este patrón tiene como principio que cada uno de los componentes esté separado en diferentes objetos, esto quiere decir que los componentes no se pueden combinar dentro de una misma clase. 

		Antes que nada, MVC separa la lógica de negocios y la capa de representación entre si. Tradicionalmente se utilizaba para interfaces graficas de usuario de estrutorio. Hoy en día la arquitectura MVC se ha hecho popular para el diseño de aplicaicones Web y aplicaciones moviles. 


		Ventajas:

			Proceso de desarrollo más raído: MVC apoya el desarrollo ràpido y paralelo, ya qye al utilizar el patron se desarrolla de una forma más eficiente debido a que una persona puede trabajar en la vista, mientras que otra puede trabajar en el controlador y asú crear la logica empresarial.

			La modificación no afecta a todo el modelo.

Introducción:

	Existe una frase celebré que dice: 'Divide y Vencerás', es una frase que se puede aplicar a muchos campos y que es realmente efectiva en la práctica. El patrón de arquitectura MVC es quizás un referente a esta frase, ya que el patrón proveé buenas prácticas que dividen el software en tres bloques principales proporcionando al equipo de programadores un desarrollo mucho más rápido y fiable.

MVC: 

	Modelo-Vista-Controlador o MVC, es un patrón de diseño arquitectural que divide el desarrollo en tres principales bloques de desarrollo separando la lógica de negocios, los datos y la representación visual dejando como conveniencia un desarrollo mucho más ágil en comparación al desarrollo monolítico o tradicional, dividiendo así el software en componentes que fácilmente podrán acoplarse al finalizar el proyecto pero no dependientes de unos con otros, y por si fuera poco, este patrón de diseño se podrá emplear independientemente de las tecnologías a utilizar.

¿Dónde se útiliza?

	El patrón de diseño MVC puede utilizarse ampliamente en cualquier sistema, sea este desarrollo para aplicaciones móviles, escritorio o Web. Aunque si es cierto, el MVC ha crecido notoriamente gracias a su aplicación exhaustiva en la Web convirtiéndose en prácticamente un estándar para los desarrolladores Webs, pero ojo, el MVC es únicamente un patrón de diseño, esto quiere decir que puede aplicarse a cualquier sistema que convenga sus directrices pero no es de uso obligatorio. 

Model:
	
	EL modelo tiene como programado el manejo de datos de nuestra aplicación, es decir, el modelo se encarga de gestionar el la lectura, inserción, actualización y borrado de nuestros datos. 

View:
	
	La vista es el componente responsable de generar la interfaz de nuestra aplicación para representarlos de una forma entendible al usuario o cliente, dicho de otra forma, la vista muestra todo aquello interesante para el usuario como lo es una página o pantalla gráfica. 

Controller:
	
	El controlador es el componente encargado de escuchar los eventos desencadenados por la vista (usuario), y ejecuta el procedimiento adecuado a estos eventos, la forma como trabaja el controlador es simple, el usuario hace una petición por medio de la vista, el controlador la gestiona consulta con el modelo (obtiene los datos), y la devuelve a la vista. 

Ventajas:
	
	El uso del patrón MVC ofrece múltiples ventajas sobre la manera de desarrollar aplicaciones, cada componente de nuestra aplicación es fácilmente reconocible ya que cada una trabaja únicamente con un objetivo concreto, a su vez ofrece una mayor rapidez de desarrollo ya que cada programador puede enfocarse únicamente en un componente de la aplicación de forma paralela.

Conclusión:

	El MVC ha aportado exitosamente sus ventajas al desarrollo web. Y aunque principalmente se utiliza para el desarrollo web, no es únicamente adaptable para este, sino que puede aplicarse para otros entornos como el desarrollo de aplicaciones móviles y de escritorio. Ten en cuenta que el MVC no es una arquitectura de uso obligatorio, pero como hemos visto es fuertemente utilizado en el desarrollo web y no está de más aprenderlo y aplicarlo de vez en cuando.