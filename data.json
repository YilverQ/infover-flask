{
	"Usuarios" : [
		{
			"id" : 1,
			"name" : "Yilver Quevedo",
			"title" : "Infover, Para Conocer Sobre Tecnologías Del Mundo Informático",
			"url_image" : "wallpaper.jpg",
			"logo_image" : "autor.jpg",
			"indice" : ["Introducción", "Temas Principales", "Temas Especificos", "Conclusión"],
			"introduction" : "Infover es un blog hecho con la finalidad de compartir el conocimiento sobre la informática sin costo alguno y para el público latinoamericano, además está publicado con la ideología de GNU/Linux lo cual permite a todos los cibernautas gozar de las 4 libertades del Free Software tanto para el contenido publicado como para el código fuente. En caso de que quieras usar o aportar al proyecto Infover puedes acceder sin problemas al github del creador. Y si estás leyendo esto enhorabuena, pues es la primera versión estable del proyecto y puedes convertirte en unos de los primeros contribuyente al proyecto.",
			"conclusion" : "Infover sigue creciendo día a día, espero hayas gozado de las características que este blog puede ofrecerte para tu crecimiento como desarrollador de software."
		}	
	],
	"Herramientas" : [
		{
			"id" : 1,
			"name" : "Frameworks",
			"title" : "Aprender Sobre Frameworks Para Agilizar El Desarrollo Y Conocer Cuándo Aplicarlos En Un Proyecto",
			"url_image" : "herramientas/Frameworks.jpg",
			"logo_image" : "herramientas/frameworks.png",
			"indice" : ["Introducción", "Framework", "¿Cuándo Usar Un Framework?", "Tecnologías Relacionadas Con Los Frameworks", "Conclusión"],
			"introduction" : "Para realizar un proyecto de software necesitamos un lenguaje de programación y dependiendo de la complejidad del proyecto podemos tardar en completar su desarrollo. Los Frameworks permiten entregar un proyecto en menos tiempo y con un código más limpio. Hoy en día es posible utilizar infinidades de recursos para facilitar las tareas, gracias a esto la automatización cada día es mayor y accesible, contar con modelos que faciliten el desarrollo de un proyecto hace que su realización sea mucho más rápida y eficaz, es aquí donde los programadores pueden  utilizar Frameworks para completar un proyecto con módulos prefabricados que agilizan el desarrollo.",
			"body" : {	"Framework" : "El Framework es una especie de plantilla donde ya vienen incluidas las funcionalidades que podrían ser siempre repetibles al desarrollar un proyecto, de esta manera se simplifica la elaboración de una tarea siendo mucho más rápido su finalización. Los programadores suelen incluir Frameworks para evitar reescribir bloques de códigos y a diferencias de las librerías, el Frameworks define unos estándares por los cual el desarrollador deberá guiarse asegurando así buenas practicas y consistencia del código.",
						"¿Cuándo Usar Un Framework?" : "El framework se puede utilizar cuando sea necesario, tened en cuenta que al implementar un framework como herramienta de trabajo podrás agilizar tu desarrollo, no obstante los frameworks se basan en su mayoría en lenguajes de programación donde extienden módulos especializados para realizar una tarea objetiva, así que no sería muy recomendable utilizarlos si no dominas el lenguaje de programación. Otra recomendación sería aprender el Framework antes de utilizarlo en un proyecto real, y ya se que suena extraño, pero no es anormal encontrar con desarrolladores que por tratar de agilizar un proyecto implementan Frameworks sin siquiera conocer como trabaja el Frameworks en si (Me incluyo), aún así los Frameworks no son enemigos, por el contrario, son unos de los mejores aliados que tendrás como desarrollador de Software."
					},
			"conclusion" : "Los Frameworks son un aliado más para el desarrollo de software, con aprender uno obtendremos buenas practicas y sobre todo y lo más llamativo será crear aplicaciones con mucha más facilidad y rapidez. El Framework funciona como una plantilla, pero no será un marco de trabajo riguroso al cuál no puedas modificar, por el contrario el Framework lo trabajas de acuerdo a tus necesidades donde siempre te facilitará las tareas al contar con modelos prefabricados por una comunidad de desarrolladores."
		},
		{
			"id" : 2,
			"name" : "Arquitectura De Software",
			"title" : "Arquitectura de Software Para el Desarrollo Web",
			"url_image" : "herramientas/Arquitectura_De_Software.jpg",
			"logo_image" : "herramientas/arquitectura_de_software.png",
			"indice" : ["Introducción", "Arquitectura De Software", "Tecnologías Relacionadas Con La Arquitectura De Software", "Conclusión"],
			"introduction" : "En el mundo de desarrollo nos enfrentamos a sistemas cada vez más complejos y aunque es software comience como algo pequeño, es posible que pase mucho tiempo activo para ir añadiendo funcionalidades y corrigiendo errores existentes mientras transcurre el tiempo de vida del software. A medida que el software comienza a crecer se vuelve imposible de mantener si no se toman las medidas necesarias, es importante que el software tenga una forma bien definida, de modo que seamos capaces de entenderlo y por supuesto mantenerlo. La arquitectura de software es una rama de la informática y como puede ser la ingeniería de software, la arquitectura de software puede ayudarnos a desarrollar aplicaciones de muy buena calidad.",
			"body" : {	"Arquitectura De Software" : "La arquitectura de software es una disciplina relevante para los desarrolladores de software hoy en día y aunque no siempre se le otorga su correspondiente importancia como lo solemos hacer con los lenguajes de programación, con ella lograremos realizar aplicaciones con rapidez, eficacia y fiabilidad. La arquitectura de software por tanto define la estructura que debe de tener un software, las piezas que que debemos ir empleando, así como se deben de juntar y trabajar entre ellas como si fueran bloques de Legos; mediante una serie de patrones y abstracciones que debemos seguir para el desarrollo de software y para interacción entre sus diversas piezas."},
			"conclusion" : "En resumen, la arquitectura de software es una disciplina que merece la pena estudiar en profundida si quieres se un desarrollador completo ya que es necesaria para la creación de software de alta calidad y aunque si bien no es tan mencionada como otras tecnologías como lo son los lenguajes de programación si están en la mayoría de los sistemas informáticos complejos y no tan complejos."
		},
		{
			"id" : 3,
			"name" : "Bases De Datos",
			"title" : "Bases de Datos, Topicos Del Almacenamiento De La Informacion",
			"url_image" : "herramientas/Bases_de_Datos.jpg",
			"logo_image" : "herramientas/bases_de_datos.png",
			"indice" : ["Introducción", "Bases De Datos", "Temas Futuros", "Tecnologías Relacionadas Con Bases De Datos", "Conclusión"],
			"introduction" : "En la actualidad el uso de los computadores es tan común que es normal verlos en negocios, administración de empresas, tiendas, entre muchos sectores. Y es que la facilidad de procesar es tan relevante que es muy beneficioso para esos sectores. Los datos es un conjunto de información que suele estar en un equipo de computo, estos datos crecen conforme avanza los años, es por eso que se han creado software capaces de administrar estos datos para hacerlos llegar con rapidez y seguridad a su destino final, los usuarios. Y cuando organizamos esta colección de información la llamamos bases de datos. ¿Pero, que es una base de datos?",
			"body" : {  "Bases De Datos" : "Una base de datos es una herramienta que funciona como un almacén, nos otorga la capacidad de almacenar grandes cantidades de información de forma organizada para poder encontrarla y utilizarla. Y aunque es comúnmente llamados bases de datos a software como Oracle, SQL Server o MySQL, una base de datos no es un programa, es una agrupación de datos organizados por lo general del mismo contexto.",
						"Temas Futuros" : "En este bloque llamado 'Bases De Datos', veremos muchos tópicos referentes a las BBDD, entre los que podemos mencionar están ORMs y DBMS pero que conforme avance el tiempo irán incrementando los subtemas para nutrir por completo esta disciplina tan compleja."
					 },
			"conclusion" : "Los datos han llegado para quedarse, es importante para los desarrolladores de software, administradores de BBDD, empresas y negocios saber gestionarlas correctamente, para ello hay que conocer los tópicos de las bases de datos e ir aprendiendo conforme avanza la tecnología."
		},
		{
			"id" : 4,
			"name" : "Ingenieria De Software",
			"title" : "Desarrollo De Aplicaciones De Alta Calidad Con Ingenieria de Software",
			"url_image" : "herramientas/Ingenieria_de_Software.jpg",
			"logo_image" : "herramientas/ingenieria_de_software.png",
			"indice" : ["Introducción", "Ingenieria De Software", "importancia De La Ingenieria De Software", "Temas Refente A La Ingenieria De Software", "Conclusión"],
			"introduction" : "A diferencia de otras ingeniería, la ingeniería de software está hecha para tratar software. Pero, los sistemas de software son abstractos e intangibles. No están restringidos por las propiedades de los materiales, regidos por leyes físicas ni procesos de fabricación. Esto simplifica la ingeniería pues no existen limites naturales a su potencia. Sin embargo, debido a la falta de restricciones físicas, el software puede volverse rápidamente complejo, difícil de mantener y costoso de cambiar.  Para resolver este tipo de problema contaremos con un ingeniero en sistema a cargo del software a desarrollar. ",
			"body" :{	"Ingeniería De Software" : "La ingeniería de software busca apoyar el desarrollo de sistemas profesionales y de alta calidad y a diferencia de la programación individual o personal la ingeniería de software debe incluir técnicas que apoyen la especificación, el diseño y la evolución del programa, ninguno de los cuales son relevantes para el desarrollo de software personal. Entonces, la ingeniería de software es una disciplina de la ingeniería que se interesa por todos los aspectos de la producción de software, desde las primeras etapas de la especificación hasta el mantenimiento de sistema después de su lanzamiento.",
						"Importancia De La Ingeniería De Software" : "Para entender la importancia de la ingeniería de software en la sociedad, el lector debe tener en cuenta que el software se ha incrustado profundamente en casi todos los aspectos de nuestras vidas y, como consecuencia, el número de personas que tienen interés en las características y funciones que brinda una aplicación ha crecido de forma notable.  Esta realidad simple nos lleva a la conclusión de que cada año la complejidad del software crece, haciendo cada vez más difícil de mantener y sobre todo la necesidad de software es crucial en estos tiempos, para solventar los problemas actuales. Tener ingenieros de software con capacidad de elaborar software de excelente calidad y que sean fácil de mantener serán de mucha importancia."
					},
			"conclusion" : "El software se ha convertido en una pieza fundamental para nuestra sociedad, estando presente en todos lados. Así mismo, el software cada año es mucho más sofisticado, y por consiguiente mas difícil de mantener. A todo esto, necesitamos ingenieros de software, y como sabemos muy bien, la habilidad principal de un ingeniero es hallar soluciones a problemas."
		}
	],
	"Tecnologias" : [
		{
			"id" : 1,
			"father" : "Frameworks",
			"id_clase" : 1,
			"name" : "Flask",
			"title" : "Conoce El Microframework De Python Para Realizar Páginas Webs Con Facilidad",
			"url_image" : "tecnologias/Flask.jpg",
			"logo_image" : "/tecnologias/flask.png",
			"indice" : ["Introducción", "¿Qué es Flask?", "Ventajas De Flask", "Conclusión"],
			"introduction" : "Desde hace mucho tiempo PHP ha reinado el mundo del back-end Web, y es que PHP fue inicialmente hecho para trabajar con páginas webs, no obstante, los desarrolladores web están optando por variedades en cuando al lenguaje de programación, entre los que podemos mencionar están Java y Ruby, pero sin dudas el que más resuena como opción alternativa es Python. Python es un lenguaje de multiproposito, a diferencias entre JavaScirpt que se ejecuta unicamente en el front-end web (Últimamente esto ha cambiado ya que JavaScript se está adaptando a otros sistemas), y PHP en el back-end web, Python está en todos lados y la web no es la excepción. Python como otros lenguajes cuentan con gran variedad de frameworks que facilitan el trabajo, el más conocido quizás es Django, pero hoy hablaremos del microframework que se posiciona como favorito día tras día.",
			"body" : {	"¿Qué Es Flask?" : "Flask es un microframework de Python para el desarrollo web. Flask es ligero y proporciona herramientas y funciones útiles que hacen que crear aplicaciones web sea algo sencillo y rápido. Al trabajar con este microframework podremos decidir no solo las bibliotecas a utilizar sino que podremos implementar la arquitectura de software que más nos convenga y disfrutemos, ya sea una APIs Rest o Model View Controller (MVC). Sin duda alguna Flask es de los mejores frameworks web de Python que encontraremos y seguro con el que disfrutaras trabajar.",
						"Ventajas De Flask" : "Flask ha logrado posicionarse como frameworks favoritos para muchos desarrolladores por sus ventajas. Entre las que podemos mencionar: 1. Flask es pequeño y ligero, dejando como libre elección implementar librerías que necesitemos, 2. No fuerza a utilizar una estructura, y como ya mencionamos, con Flask podremos hacer aplicaciones con arquitectura MVC o APIs, pero no solo eso, flask no cuenta con un ORM nativo o dependencias para funcionar; 3. Fácil de escalar, con Flask podemos empezar con una aplicación pequeña e ir implementando funcionalidades mientras transcurre el tiempo del proyecto; 4. Inicio rápido, quizás una de las características que hacen que muchos terminen por degustar Flask es que es excelente opción si quieres aprender un framework web y estás corto de tiempo ya que aprender flask será muy fácil."
					},
			"reference" : 	[	"Código Facilito - Eduardo Ismael García Pérez - ¿Por qué aprender Flask? - www.codigofacilito.com",
								"Digital Ocean - Adbelhadi Dyouri - ¿Cómo Crear una aplicación web usando Flask en Python 3? - www.digitalocean.com",
								"EnjambreLab - Hugo Ruscitti - Creando APIs con Flask - www.blog.enjambrelab.com.ar",
								"Imaginary Cloud - Pedro MArtinho - Flask Python: Creación De API Rest y Documentación Swagger www.imaginarycloud.com"
							],
			"conclusion" : "Existen diversos frameworks para lenguajes como PHP y Java, y quizás estos lenguajes de programación sean mucho más utilizados para realizar páginas webs, no obstante, Python se posiciona cada día más como el favorito para muchas áreas y no solo científica como suele hacer, el desarrollo web para Python a penas comienza y empresas de todo tipo necesitarán expertos en esta área, no es mala opción empezar aprender Flask para realizar tus proyectos webs."
		},
		{
			"id" : 2,
			"father" : "Arquitectura De Software",
			"id_clase" : 1,
			"name" : "Api Rest",
			"title" : "API Rest, Un Estilo De Arquitectura Para Comunicar Aplicaciones",
			"url_image" : "tecnologias/Api_Rest.jpg",
			"logo_image" : "tecnologias/api_rest.png",
			"indice" : ["Introducción", "API", "Rest", "Verbos HTTP", "Puntos A Favor", "¿Cuándo Utilizar API Rest?", "Conclusión"],
			"introduction" : "Realizar una aplicación no es una tarea fácil, solo ponte a pensar como harías para crear una aplicación que tenga bases de datos, back-end y front-end. Para ello necesitamos un equipo. Sería muy conveniente realizar miniaplicaciones y luego integrarlas en una sola aplicación máster, de hecho, esto se hace muy a menudo. API es un conjunto de restricciones que permite la perfecta comunicación entre aplicaciones y si se implementa con Rest que no es más que una forma de utilizar una API, podremos sacarle el máximo provecho a esta arquitectura para realizar nuestras aplicaciones.",
			"body" : {	"API" : "API es un acrónimo de Application Programming Interface, y se utiliza para comunicar datos entre distintas aplicaciones. Los archivos de datos que trabajan las APIs pueden ser de cualquier tipo, HTML, .TXT, .CSV, pero sin duda alguna la más utilizada son JSON y XML y esto se debe a que son más rápidas y entendibles para el humano. Teniendo los archivos a trabajar la API trabajará sobre peticiones HTTP responsables de las operaciones básicas para la manipulación de datos.",
						"Rest" : "Representational State Transfer o simplemente Rest, en un conjunto de restricciones con las que podemos crear aplicaciones webs utilitando HTTP para obtener datos y generar operaciones sobre archivos como XML y JSON (estos por ser rápidos y fácilmente entendibles). Ten en cuenta que Rest no es una arquitectura de software sino una técnica o estilo de arquitectura la cual se aplica conjuntamente con APIs.",
						"Restricciones De Un Sistema Rest" : {	"Cliente-Servidor" : "Esta restricción mantiene al cliente y al servidor por separados, la aplicación Front-end no necesita conocer como trabaja el Back-end ni viceversa, así cada componente de nuestra aplicación se despreocupa como funciona la otra parte.",
																"Sin Estado" : "Cada petición que recibe el servidor debería ser independiente, es decir, no es necesario mantener secciones para ejecutar una determinada acción. Lo que permite que ni el cliente ni el servidor necesiten recordar un estado previo para poder satisfacerla.",
																"Cacheable" : "Debe admitir un sistema de almacenamiento en caché para evitar llamadas recurrentes al servidor y así evitar recuperar el mismo recurso.",
																"Interfaz Uniforme" : "Esta restricción agrupa cuatros conceptos para la transferencia de datos (POST, GET, PUT, DELETE) para un sistema Rest, y utiliza enlaces para navegar por la aplicación y acceder a un recurso en concreto con una URI en concreta.",
																"Sistemas De Capas" : "El servidor puede disponer de varias capas para su implementación. Esto ayuda a que cada capa lleve una funcionalidad dentro del sistema ayudando a mejorar la escalabilidad, el rendimiento y la seguridad."
						 									 },
						"Verbos HTTP" : "Cada petición realizada a nuestra API responde a un verbo, y dicho verbo a una operación en común. Mediante los métodos HTTP hacemos las peticiones, lo común es GET, POST, PUT y DELETE.",
						"" : {
								"GET" : "Se usa para solicitar o consultar los recursos, y tiene como respuesta 200 que es equivalente a que todo ha funcionado correctamente o 404 que es el famoso recurso no encontrado y es la respuesta que da el servidor cuando un recurso no está.",
								"POST" : "Se usa para insertar nuevos recursos, y tiene como respuesta 403 (accedo prohibido), 400 (petición incorrecta), 500 (error en el servidor), 201 recurso creado.",
								"PUT" : "Se usa para actualizar recursos, los mensajes que te puede dar son los mismo que el POST. 403 (accedo prohibido), 400 (petición incorrecta), 500 (error en el servidor), 201 recurso creado.",
								"DELETE" : "Se usa para borrar recursos, algunos resultados posibles son 200 (recurso eliminado), 404 (Not found) y 500 (error en el servidor)."
							 },
						"Puntos a favor de las APIs Rest" : "Debido a que Rest separa completamente la interfaz de usuario del servidor y el almacenamiento de datos, Rest ofrece la ventaja de escalar el producto sin excesivos problemas. Además de poder migrar a otros servidores o probar nuevos entornos dentro del desarrollo ya que las APIs Rest se adaptan a la tecnología con la que se esté trabajando.",
						"¿Cuándo Utilizar API Rest?" : "Últimamente la tendencia es desarrollar aplicaciones orientadas a servicios, y sin duda alguna, es conveniente trabajar con API Rest cuando requerimos que nuestro sistema no solamente sea accedido desde la Web sino que también se puede acceder desde una aplicación de escritorio o móvil, También se podría dar el caso donde requerimos desacoplar la aplicación en capas para ir iterando funcionalidades y así escalar la aplicación."
						},
			"reference" : [	"AnexSoft - Eduardo Rodríguez Patiño - ¿Qué es Rest? - www.anexsoft.com",
							"Idento - Jonathan Ordóñez - ¿Qué es una Api Rest? - www.idento.es",	
							"RockContent - Ivan De Souza - Api Rest: Conoce la importancia de este recurso para el desempeño de una página web - www.rockcontent.com",
							"BBVA Api_Rest - Api Rest: Cuáles son sus ventajas en el desarrollo de proyectos - www.bbvaapimarket.com",
							"Arquitectura Java - Cecilio Álvares Cuales - ¿Qué Es Rest? - www.arquitecturajava.com",
							"Red Hat - ¿Qué Es una API De Rest? - www.redhat.com",
							"juanda.gitbooks.io - www.juanda.gitbooks.io",
							"The Dojo Blog - Hector Patricio - Entendiendo Rest, El estilo de Arquitectura - www.blog.thedojo.mx",
							"Imaginary Cloud - Pedro Martinho - Flask Python: Creación De API Rest y Documentación Swagger  - www.imaginarycloud.com"
							],
			"conclusion" : "API son perfectas para realizar varias aplicaciones y poderlas comunicar mediante un archivo universal como XML o JSON, por otro lado Rest no es una arquitectura de software sino que es un estilo de arquitectura que se suele utilizar conjuntamente con las APIs. Para que una API sea considerada API Rest deberá seguir unas restricciones para que aseguren que sean Rest como por ejemplo que sea Cliente-Servidor, Sin estado, Cacheable entre otros. Estas prácticas le otorgará a tu aplicación facilidad para probar nuevos entornos y poder migras a otros servidores sin importar la tecnología o lenguaje de programación en el cual estés trabajando."
		},
		{
			"id" : 3,
			"father" : "Arquitectura De Software",
			"id_clase" : 2,
			"name" : "MVC",
			"title" : "Modelo Vista Controlador, Ventajas De Su Uso Para El Desarrollo De Aplicaciones",
			"url_image" : "tecnologias/MVC.png",
			"logo_image" : "tecnologias/mvc.png",
			"indice" : ["Introducción", "MVC", "¿Dónde Se Utiliza?", "Model", "View", "Controller", "Ventajas", "Conclusión"],
			"introduction" : "Existe una frase celebré que dice: 'Divide y Vencerás', es una frase que se puede aplicar a muchos campos y que es realmente efectiva en la práctica. El patrón de arquitectura MVC es quizás un referente a esta frase, ya que el patrón proveé buenas prácticas que dividen el software en tres bloques principales proporcionando al equipo de programadores un desarrollo mucho más rápido y fiable.",
			"body" : {	"MVC" : "Modelo-Vista-Controlador o MVC, es un patrón de diseño arquitectural que divide el desarrollo en tres principales bloques de desarrollo separando la lógica de negocios, los datos y la representación visual dejando como conveniencia un desarrollo mucho más ágil en comparación al desarrollo monolítico o tradicional, dividiendo así el software en componentes que fácilmente podrán acoplarse al finalizar el proyecto pero no dependientes de unos con otros, y por si fuera poco, este patrón de diseño se podrá emplear independientemente de las tecnologías a utilizar.",
						"¿Dónde Se Utiliza?" : "El patrón de diseño MVC puede utilizarse ampliamente en cualquier sistema, sea este desarrollo para aplicaciones móviles, escritorio o Web. Aunque si es cierto, el MVC ha crecido notoriamente gracias a su aplicación exhaustiva en la Web convirtiéndose en prácticamente un estándar para los desarrolladores Webs, pero ojo, el MVC es únicamente un patrón de diseño, esto quiere decir que puede aplicarse a cualquier sistema que convenga sus directrices pero no es de uso obligatorio.",
						"Model" : "EL modelo tiene como programado el manejo de datos de nuestra aplicación, es decir, el modelo se encarga de gestionar el la lectura, inserción, actualización y borrado de nuestros datos.",
						"View" : "La vista es el componente responsable de generar la interfaz de nuestra aplicación para representarlos de una forma entendible al usuario o cliente, dicho de otra forma, la vista muestra todo aquello interesante para el usuario como lo es una página o pantalla gráfica.",
						"Controller" : "El controlador es el componente encargado de escuchar los eventos desencadenados por la vista (usuario), y ejecuta el procedimiento adecuado a estos eventos, la forma como trabaja el controlador es simple, el usuario hace una petición por medio de la vista, el controlador la gestiona consulta con el modelo (obtiene los datos), y la devuelve a la vista.",
						"Ventajas" : "El uso del patrón MVC ofrece múltiples ventajas sobre la manera de desarrollar aplicaciones, cada componente de nuestra aplicación es fácilmente reconocible ya que cada una trabaja únicamente con un objetivo concreto, a su vez ofrece una mayor rapidez de desarrollo ya que cada programador puede enfocarse únicamente en un componente de la aplicación de forma paralela."
					},
			"reference" : [	"Campus MPV - José Aguilar - ¿Qué es el patrón MVC en programación y por qué es útil? - www.campusmvp.es",
							"SRC - Javier Gómez - ¿Qué es y cómo funciona el desarrollo web MVC? - www.srcodigofuente.es",
							"Medium - Valeria García Cobian - Patrón de diseño MVC - www.blog.nearsoftjobs.com"],
			"conclusion" : "El MVC ha aportado exitosamente sus ventajas al desarrollo web. Y aunque principalmente se utiliza para el desarrollo web, no es únicamente adaptable para este, sino que puede aplicarse para otros entornos como el desarrollo de aplicaciones móviles y de escritorio. Ten en cuenta que el MVC no es una arquitectura de uso obligatorio, pero como hemos visto es fuertemente utilizado en el desarrollo web y no está de más aprenderlo y aplicarlo de vez en cuando."
		},
		{
			"id" : 4,
			"father" : "Bases De Datos",
			"id_clase" : 1,
			"name" : "ORM",
			"title" : "ORMs ¿Por Qué Su Uso Y Cuándo Usarlos?",
			"url_image" : "tecnologias/ORM.jpg",
			"logo_image" : "tecnologias/orm.png",
			"indice" : ["Introducción", "ORM", "¿Por Qué Su Uso?", "¿Cuándo Usarlos?", "Conclusión"],
			"introduction" : "La principal atracción de una aplicación será los datos que esta maneje y es que sin datos sencillamente es una aplicación vaciá. Para almacenar los datos tenemos que conectarnos a una base de datos, lo cuál es un trabajo laborioso cuando tenemos que transformar nuestras tablas objetos de nuestra aplicación y viceversa. Para facilitarnos el trabajo han llegado los ORMs, utilizando un ORM el mapeo será automático y por si fuera poco, será independiente de la bases de datos que estemos utilizando pudiendo así cambiar de motor según nuestras necesidades, pero ojo, el uso del ORM no siempre es conveniente ya que su uso puede traer serias repercusiones en cuanto a la velocidad de nuestra aplicación, es por ello que hay que conocer bien como funciona y cuándo aplicarlos.",
			"body" : {	"ORM" : "Un ORM es una herramienta nos permite mapear, o lo que es lo mismo, convertir los objetos de nuestra aplicación a un formato adecuado para ser previamente almacenados independientemente de la base de datos que utilicemos. Este se debe a que el ORM es el encargado de hacer el mapeo y no tendremos que realizar acciones CRUD (Create, Read, Update, Delete) con un lenguaje SQL porque será nuestro ORM el que se encargue completamente de automatizar este proceso sin importar si la bases de datos es MySQL, Oracle, SQLite u otra base de datos.",
						"¿Por Qué Su Uso?" : "Debido a que el ORM se encarga completamente del mapeo, su uso se ha extendido mucho, simplificando la tarea del programador y logrando que el accedo a los datos sea automático. Por otra parte ayuda mucho agilizar el desarrollo de una aplicación así como el uso para los programadores no tan expertos en lenguaje SQL.",
						"¿Cuándo Usarlos?" : "EL uso del ORM es especialmente recomendado en aplicaciones donde el rendimiento de la misma no es crítica, ten en cuenta que el uso del ORM tiene un golpe duro en el rendimiento ya que el ORM trabaja con objetos en vez de SQL, No obstante, el uso del ORM acelera considerablemente el desarrollo y si requieres migrar de bases de datos haber usado un ORM podrá facilitarte tu trabajo."
					 },
			"reference" : [	"Programar Fácil Con Arduino - Luis Del Valle Hernández - ¿Qué Es Un ORM? - www.programarfacil.com", 
							"NeoAttack - ORM Concepto de ORM - www.neoattack.com", 
							"Cipsa - Ángel Aguinaga - ¿Qué es un ORM y cuándo emplearlo? - www.cipsa.net", 
							"Dreams Team - Miguel Romanos - ¿Qué es un ORM? - www.dreams.es"],
			"conclusion" : "El uso del ORM ha crecido mucho en los últimos años, prácticamente cualquier lenguaje de programación cuenta con su ORM, su uso es conveniente en aplicaciones pequeñas con un desarrollo ágil, pero no tanto para aplicaciones complejas. Por otro lado, un ORM puede ayudarte a realizar una aplicación con una base de datos simplemente sabiendo el lenguaje de programación que utiliza el ORM, pero ojo, el uso del ORM es mucho más eficaz sabiendo como trabaja una base de datos, así que sería perfecto probarlo una vez después conozcas las características de una base de datos y el uso de un lenguaje SQL."
		},
		{
			"id" : 5,
			"father" : "Bases De Datos",
			"id_clase" : 2,
			"name" : "DBMS",
			"title" : "DataBase Manage System, ¿Qué Es Y Ventajas De Su Uso?",
			"url_image" : "tecnologias/Data_Base_Manage_System.jpg",
			"logo_image" : "tecnologias/data_base_manage_system.png",
			"indice" : ["Introducción", "DataBase Management System", "Ventajas De Su Uso", "Lenguajes De Un DBMS", "Conclusión"],
			"introduction" : "La recopilación de datos en fundamental para cualquier empresa y equipo de desarrolladores, los datos son quizás el motor de vida para cualquier aplicación, es por ello que es importante contar con una bases de datos robusta y que mejor que contar con un Sistema De Gestión De Bases De Datos o como será llamado durante este articulo, DBMS.",
			"body" : {	"DataBase Management System" : "Una DataBase Managent System o DBMS es un software para crear y administrar bases de datos. Y a grandes rasgos el DBMS gestiona 3 cosas importantes: los datos, el motor de la base de datos y el esquema de la base de datos. otorgando a la base de datos concurrencia, seguridad e integridad de datos. El DBMS aplica una serie de técnicas a un conjunto de datos para convertirlo en información con valor operativo y siendo posible acceder a los datos de forma rápida y estructurada. Dicho de otra forma, un DBMS es un software cuya función es servir de interfaz entre la BBDD, el usuario y las aplicaciones.",
						"Ventajas De Su Uso" : "El uso de un DBMS para almacenar y administrar datos permite a los usuarios finales y programadores de aplicaciones acceder y usar los mismo datos mientras administran la integridad de los mismo. Entre las ventajas podemos mencionar que con el uso de un DBMS podemos:",
						"" : { 	"# 1" : "Garantizar la seguridad de los datos.",
								"# 2" : "Fomentar la integridad de los datos, con esto nos referimos a adaptar las medidas necesarias para garantizar la validez de los datos almacenados.",
								"# 3" : "La capacidad de respaldo es mayor ya que los DBMS son capaces de restaurar a partir de estas copias los datos que se hayan podido perder.",
								"# 4" : "Un DBMS puede controlar el acceso para evitar que múltiples usuarios accedan de forma simultánea.",
								"# 5" : "El uso de un DBMS reduce el tiempo de respuesta en comparación de otras tecnologías como los ORMs."
							 },
						"Lenguajes De Un DBMS" : "Los lenguajes utilizados en DBMS permiten al administrador de la bases de datos especificar los datos que la componen, su estructura, las posibles relaciones entre ellos, las reglas de integridad, los controles de acceso, las características de tipo físico y las vistas externas de los usuarios.",
						" " : {	"DDL" : "Los DDL o Lenguaje de Definición de Datos, se utiliza para especificar el esquema de la base de datos, las vistas de los usuario y las estructuras de almacenamiento. ",
								"SDL" : "SDL o Lenguaje de Definición de Almacenamiento, es utilizado por el DBMS para especificar el esquema interno que corresponder a la base de datos.",
								"VDL" : "VDL o View Definition Language por su nombre en inglés, lo utiliza el DBMS para especificar las vistas del usuario y sus correspondencia con el esquema conceptual.",
								"DML" : "DML o Lenguaje de Manipulación de Datos, se utiliza para leer y actualizar los datos de la bases de datos. Es utilizados por los usuarios para realizar consultas, inserciones, eliminación y modificaciones. Un ejemplo es el lenguaje SQL (Structures Query Language)."
							  }
					 },
			"reference" : [	"PowerData - Redacción PowerData - ¿Qué Es El Sistema Manejador De Bases De Datos? - www.blog.powerdata.es",
							"TechTarget - Sistema De Gestión De Bases De Datos o DBMS - www.searchdatacenter.techtarget.com",
							"Tech4Business - @Redacción España - ¿Qué Es Un DataBase Management System? - www.agenciab12.com",
							"Sistemas - Definición De DBMS - www.sistemas.com"],
			"conclusion" : "Saber administrar bien una base de datos es fundamental para una empresa y una aplicación, el software para crear y administrar bases de datos es conocido como DataBase Managent System o DBMS, con su uso conseguiremos seguridad e integridad de los datos. "
		},
		{
			"id" : 6,
			"father" : "Ingenieria De Software",
			"id_clase" : 1,
			"name" : "Proceso Unificado",
			"title" : "Características Del Proceso Unificado, Un Marco De Trabajo Adaptable",
			"url_image" : "tecnologias/UP.jpg",
			"logo_image" : "tecnologias/up.png",
			"indice" : ["Introducción", "Proceso Unificado", "Aspectos Claves", "Fases Del Proceso Unificado", "Flujos De Trabajos", "Perspectivas Para El Entendimiento UP", "Conclusión"],
			"introduction" : "El proceso unificado es ideal para proyectos de software de gran tamaño. Además, es adaptable para cualquier tipo de aplicación. Esto es algo que los creadores (Jacobson, Booch y Rumbaugh) han conseguido implementando lo mejor de cada autor. Cuando hablamos del Proceso Unificado o UP tenemos que mencionar que está regido por 3 aspectos definitorios: 1. Dirigidos por casos de uso, 2. Centrado en la arquitectura y 3. UP es un modelo iterativo e incremental;  tres aspectos que dan vida al Proceso Unificado. Y no solo eso, el UP cuenta con un ciclo de vida donde cada fase cuenta con iteraciones que recorren un flujo de trabajo que permiten guiar al ingeniero de software por un camino correcto. Para concluir, veremos 3 perspectiva (Dinámica, Estática y Práctica) propuesta por Ian Sommerville, las cuales no modifican el proceso original sino que estas ofrecen un mejor entendimiento del Proceso Unificado.",
			"body" : {	"Proceso Unificado": "El Proceso Unificado es un modelo de desarrollo como lo es el Waterfall (Modelo Cascada), con ella se pretende solucionar muchos de los problemas asociados al desarrollo de software, y es que UP es un marco de trabajo que puede especializarse para una gran variedad de sistemas de software, para diferentes niveles de aptitud y diferentes tamaños de proyectos, para conseguirlo los creadores implementaron las mejores características de los modelos clásicos e implementaron nuevos con el fin de adaptarse a cualquier proyecto. Como resultado obtuvieron un modelo de desarrollo flexible y adaptable.",
						"Aspectos Claves": {"Dirigido Por Casos De Usos": "Los casos de uso reflejan lo que los usuarios futuros necesitan y desean, a partir de aquí los casos de usos guían el proceso. La captura de requerimiento tiene dos objetivos: encontrar los verdaderos requerimientos y representarlos de un modo adecuado para ser entendidos pos los usuarios, clientes y desarrolladores.",
											"Centrado En La Arquitectura" : "Los casos de usos son increíbles, pero no son suficientes así que para obtener una idea clara del proyecto, el Proceso Unificado utiliza la arquitectura para mostrar los elementos estructurales y las interfaces del sistema. Por lo que los usuarios y desarrolladores deben estar de acuerdo.", 
											"Iterativo e Incremental" : "UP propone que cada fase se desarrolle en iteraciones, cada iteración involucra actividades de todos los flujos de trabajo, esto permite que el desarrollo del software se pueda hacer incrementos poco a poco."}, 
						"Fases Del Proceso Unificado" : {"Fase Concepción" : "Esta fase tiene como propósito establecer e identificar todas las entidades externas que interactuarán con el sistema, así como identificar los riesgos asociados al proyecto.",
														"Fase Elaboración" : "Las metas de la fase elaboración consisten en desarrollar la comprensión del problema , establecer un marco conceptual arquitectónico y diseñar un plan para el proyecto. ",
														"Fase Construcción" : "La fase construcción incluye el diseño, programación y pruebas del sistema, con esta fase construiremos el camino prefabricado en la fase elaboración y al completarse esta, el sistema debe estar funcionando y su documentación lista.",
														"Fase Transición" : "El propósito de esta fase es asegurar que el software esté disponible para los usuarios finales, ajustar los errores y defectos encontrados y capacitar a los usuarios y/o soporte técnico de ser necesario, el propósito de esta fase final es poner en marcha el sistema en un ambiente real."},
						"Flujos De Trabajos" : "El flujo de trabajo está distribuido a través de todas las fases del proceso unificado. El flujo de trabajo ayuda a definir el trabajo a realizar dentro de las fases del Proceso Unificado, la importancia y la dedicación a cada disciplina varía dependiendo de la fase en que se encuentre. Estos flujos de trabajos se dividen en 6 categorías:",
						" " : {	"Modelado De Negocios" : "Se modelan los procesos de negocio utilizando casos de uso de la empresa.",
								"Requerimientos" : "Se identifican los actores que interactuarán con el sistema y se desarrollan casos de usos propios para modelar los requerimientos del sistema.",
								"Análisis y Diseños" : "Se crea y documenta un modelo de diseño utilizando modelos arquitectónicos, de componentes, de objetos y de secuencia.",
								"Implementación" : "Se implementan y estructuran los componentes del sistema en subsistemas de implementación. La generación de códigos automática a partir de modelos de diseño ayuda a acelerar este proceso.",
								"Pruebas" : "Las pruebas son un proceso iterativo que se realiza en conjunto con la implementación. Las pruebas del sistema siguen al completar la implementación.",
								"Despliegue" : "Se crea la liberación de un producto, se distribuye a los usuarios y se instala en su lugar de trabajo."}, 
						"Perspectivas Para El Entendimiento Del UP" : "Ian Sommerville describe el proceso  unificado desde tres perspectivas: dinámica, estática y práctica. Estas perspectivas se usan para comprender las características y estructura del proceso unificado.", 
						"" : {	"Perspectiva Dinámica" : "Muestra las fases del modelo (concepción, elaboración, construcción y transición).",
								"Perspectiva Estática" : "Representa las actividades del flujo de trabajo. (Modelado de negocios, requerimientos, análisis y diseño, implementación, pruebas, despliegue.)",
								"Perspectiva Práctica" : "Recomienda las buenas prácticas para obtener un desarrollo de software de alto nivel. Entre las que podemos mencionar son: 'Desarrollar el software de manera iterativa', 'Documentar de manera explicita los requerimientos del cliente', 'Estructurar la arquitectura del sistema de componentes', 'Usar modelos UML para elaborar representaciones de software estáticos y dinámicos', 'Garantizar que el software cumpla con los estándares de calidad', 'Gestionar los cambios con un software de administración de cambios'"}
					},
			"reference" : ["Ingeniería De Software: Un Enfoque Práctico. Séptima Edición Mc Graw Hill. Roger S Pressman.",
							"Ingeniería De Software. Novena Edición, Addison- Wesley. Ian Sommerville.",
							"El Proceso Unificado De Desarrollo De Software. Primera Edición Addison- Wesley. Ivar Jacobson, Grady Booch y James Rumbaugh.",
							"Estructura Básica Del Proceso Unificado De Desarrollo De Software. Universidad ICESI. Robin Alberto Castro Gil.",
							"Un Método Para la Trazabilidad De Requisitos En El Proceso Unificado De Desarrollo. Escuela De Ingeniería De Antioquia, Revista EIA, ISSN 1794-1237 Número 8. Marta Silvia Tabares, Andres Felipe Barrera, Juan David Arroyave, Juan Diego Pineda.",
							"Potencialidades Y Debilidades Del Proceso Unificado De Desarrollo Y Watch. Departamento De Informática Y Sistemas UAJMS Tanja Bolivia. Padilla Vedina Carmen Janeth."],
			"conclusion" : "El proceso unificado es adaptable a casi cualquier tipo de sistema que se necesite, no solo un proyecto de desarrollo de software sino que también se adapta a un sistema que requiera añadir hardware. Podemos utilizar las perspectivas de Ian Sommerville para entender la estructura básica del proceso unificado, estas tres perspectivas dividen a las fases, el flujo de trabajo y añade recomendaciones de prácticas a emplear durante el desarrollo del sistema. El proceso unificado es un modelo de desarrollo nuevo comparado con el modelo cascada, pero aun así sigue incorporando las bases de cualquier otro modelo de desarrollo general (comunicación, planeación, modelado, construcción y despliegue), por lo cual, no lo hace un modelo extraño y difícil de entender."
		},
		{
			"id" : 7,
			"father" : "Ingenieria De Software",
			"id_clase" : 2,
			"name" : "Lenguaje De Modelado Unificado",
			"title" : "Tópicos De Introducción Al Lenguaje De Modelo Unificado - UML",
			"url_image" : "tecnologias/UML.jpg",
			"logo_image" : "tecnologias/uml.png",
			"indice" : ["Introducción", "Unified Modeling Lenguage - UML", "¿Qué Es Un Modelo?", "Diagramas UML", "Diagramas De Casos De Usos", "Diagramas De Clases", "Diagramas De Secuencias", "Diagramas De Estados", "Diagramas De Actividades", "¿Cuándo Usar Los Diagramas?", "Conclusión"],
			"introduction" : "UML tiene lo que siempre se quiso desde la crisis del software, una manera de modelar los sistemas. El lenguaje de modelo unificado pretende unificar los mejores modelos e incorporar prácticas para usarse como estándar universal, y lo ha conseguido con éxito. El UML no es un método, es un lenguaje de modelado que se basa en notaciones gráficas de los que se valen los métodos. Tal y como lo hacen los arquitectos y los ingenieros civiles, UML utiliza un vocabulario (gráfico) con el que se pueda entender y especificar con facilidad un sistema.",
			"body" : {	"Unified Modeling Lenguage - UML": "Tal y como indica su nombre, UML (Unified Modeling Language), es un lenguaje de modelado Y a diferencias de las metodologías de desarrollo de software como el método cascada, UML no te indica un ciclo de vida de desarrollo por el cuál debas regirte. UML se puede implementar independientemente al lenguaje de programación con el que trabajes y por si fuera poco este se puede usar dentro de casi cualquier metodología de desarrollo existente. Ahora bien, ¿Qué es realmente UML? es un lenguaje de modelado visual que se usa para especificar, visualizar, construir y documentar artefactos de un sistema de software. Debido a este factor, UML se posiciona como preferencia para desarrollar un software.",
						"¿Qué Es Un Modelo?" : "Un modelo es una representación gráfica del diseño que previamente se construirá, por ejemplo, los arquitectos, los ingenieros civiles e ingenieros electricistas utilizan modelos hechos en papel para expresar un medio adecuado para el trabajo. Así mismo los ingenieros de software pueden utilizar modelos para representar un software a desarrollar. UML es un lenguaje de modelo como dijimos anteriormente, este modelo capta aspectos importantes, simplifica y omite requerimientos dependiendo del diagrama que se utilice.",
						"Diagramas UML" : "Un diagrama en UML es la representación gráfica que tiene el modelo, es una vista y guía para el software a desarrollar. Como no hay una sola manera de ver el software, UML ofrece un conjunto de diagramas para entender el software desde diferentes perspectivas. En este documento veremos 5 diagramas los cuáles considero más importantes.",
						"Diagramas De Casos De Usos" : "Los diagramas de casos de usos cuentan con dos herramientas claves, ‘casos de usos’ que tienen como propósito definir una pieza de comportamiento coherente, sin revelar la estructura interna del sistema y por supuesto ‘actores’ que expresan una entidad externa al sistema que realiza algún tipo de interacción con el mismo.",
						"Diagramas De Clases" : "Los diagramas de clases describen los tipos de objetos que hay en el sistema y las diversas clases de relaciones estáticas que existen entre ellos. Una clase es un elemento que se representa en tres partes: nombre, atributos y acciones.",
						"Diagramas De Secuencias" : "A diferencia de los diagramas de clases y los diagramas de casos de uso, el diagrama de secuencia muestran gráficamente las dinámicas de los objetos durante el tiempo. El diagrama secuencial está compuesto principalmente por el ejevertical que representa el tiempo y el eje horizontal donde están los objetos o actores. Cada objeto o actor tiene una línea vertical, y los mensajes se representan mediante flechas entre los distintos objetos. El tiempo fluye de arriba abajo.",
						"Diagramas De Estados" : "Un diagrama de estado muestra el objeto durante su vida, indicando que eventos realiza y cuáles son las respuestas y acciones que genera. Es importante resaltar que los diagramas de estados se dibujan para una sola clase, mostrando el comportamiento de un solo objeto durante su ciclo de vida. En cuanto a la representación gráfica, los estados se muestran con cajas con curvas redondas y la transición de un estado a otro mediante una flecha, esta flecha puede tener el nombre del evento que hace que cambie de estado.",
						"Diagramas De Actividades" : "Un diagrama de actividad UML muestra el comportamiento dinámico de un sistema o de parte de un sistema a través del flujo de control entre acciones que realiza el sistema. Es similar a un diagrama de flujo, excepto porque un diagrama de actividad puede mostrar flujos concurrentes. El diagrama cuenta con rectángulos con esquinas redondas que muestran las acciones o tarea realizada por el sistema. Las flechas que van de un cuadro a otro es el flujo del sistema.",
						"¿Cuándo Usar Los Diagramas?" : "Basados en la opinión de Martin Fowler y Kendall Scott, los diagramas pueden ser utilizados en diferentes circunstancias.",
						"" : {	"Diagramas de Casos de Usos" : "Los casos de usos es una excelente herramienta para la obtención de los requerimientos de un sistema. Los casos de uso es una tarea principal cuando se comienza un proyecto, recomiendo usar los diagramas de casos de uso en etapas iniciales como concepción y elaboración pero también pueden aplicarse cuando el proyecto tenga iteraciones y se requiera conocer nuevos requerimientos.",
								"Diagramas de Clases" : "Los diagramas de clases son básicamente la columna vertebral para un desarrollo con enfoque orientado a objetos. Pueden usarse cuando se requiera especificar una clase y objetos a detalles.",
								"Diagramas de Secuencias" : "Recomiendo usarlos cuando queramos conocer el comportamiento del objeto durante el tiempo. Son buenos para mostrar la colaboración con otros objetos pero no mucho para conocer los detalles de este. Si tienes la necesidad de conocer a detalle el objeto recomiendo mejor los diagramas de clase.",
								"Diagramas de Estados" : "Los diagramas de estados son buenos para conocer el comportamiento de un objeto a través de varios casos de uso, aunque no serán convenientes si requieres descubrir el comportamiento de varios objetos que interactúan entre sí.",
								"Diagramas de Actividades" : "Fowler y Scott dan unos concejos de cuando usarlos.1. ‘No usarlos para ver cómo se comporta un objeto durante su periodo de vida.’ 2. ‘No usarlos para ver como colaboran los objetos.’ 3. ‘Si usarlos para comprender el flujo de trabajo.’ 4. ‘Si usarlos para aplicaciones multihilo.’"}
					},
			"reference" : [	"Ingeniería De Software: Un Enfoque Práctico. Séptima Edición Mc Graw Hill. Roger S Pressman.",
							"El Lenguaje Unificado De Modelado, Manual De Referencia. James Rumbaugh, Ivar Jacobson y Grady Booch. Addison Wesley.",
							"UML Gota a Gota. Martin Fowler y Kendall Scott. Pearson Education",
							"Desarrollo Orientado a Objetos Con UML. Xavier. Ferré Grau y María Isabel Sánchez Segura. Departamento de Informática De la Universidad Politécnica De Madrid.",
							"El Lenguaje Unificado de Modificado (UML). Enrique Hernández Orallo. Universidad Politécnica De Valencia. Autores Científicos- Técnicos y Académicos (ACTA).",
							"Diagramas Del UML. Centro De Creación De La Comunidad De Madrid. Teatro de La Abadía."],
			"conclusion" : "El lenguaje de modelo unificado o UML no es una metodología de desarrollo pero si puede usarse dentro de una. El UML es un estándar para comprender y diseñar gráficamente el software o sistema que debemos realizar. El UML se basa en modelos, un modelo es un diseño del sistema que puede ser comprendida con facilidad por los entes comprometidos con el desarrollo."
		}
	]
}